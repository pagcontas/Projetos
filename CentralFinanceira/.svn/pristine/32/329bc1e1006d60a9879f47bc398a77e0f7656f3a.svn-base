package br.com.jsoft.centralfinanceira.bo.central;

import com.xpert.core.crud.AbstractBusinessObject;
import br.com.jsoft.centralfinanceira.dao.central.FatosBoletosDAO;
import br.com.jsoft.centralfinanceira.modelo.central.FatosBoletos;
import br.com.jsoft.centralfinanceira.modelo.central.Loja;
import br.com.jsoft.centralfinanceira.vo.ComissaoConvenioVO;
import br.com.jsoft.centralfinanceira.vo.ComissaoLojaVO;
import br.com.jsoft.centralfinanceira.vo.ConsultaFatosVO;
import br.com.jsoft.centralfinanceira.vo.RelatorioRemunecaoVO;
import br.com.jsoft.centralfinanceira.vo.RentabilidadeVO;
import static com.xpert.Configuration.getEntityManager;
import com.xpert.core.validation.UniqueField;
import com.xpert.core.exception.BusinessException;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import com.xpert.faces.utils.FacesJasper;
import com.xpert.persistence.query.Restrictions;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import javax.faces.context.FacesContext;
import javax.persistence.Query;

/**
 *
 * @author Juniel
 */
@Stateless
public class FatosBoletosBO extends AbstractBusinessObject<FatosBoletos> {

    @EJB
    private FatosBoletosDAO fatosBoletosDAO;

    @Override
    public FatosBoletosDAO getDAO() {
        return fatosBoletosDAO;
    }

    @Override
    public List<UniqueField> getUniqueFields() {

        return null;
    }

    @Override
    public void validate(FatosBoletos fatosBoletos) throws BusinessException {
    }

    @Override
    public boolean isAudit() {
        return true;
    }

    /**
     *
     * @author Juniel
     * @param fatos
     * @see Metodo usado para gerar relatorio Caused by:
     * java.lang.OutOfMemoryError: GC overhead limit exceeded
     */
    public void gerarReport(List<RelatorioRemunecaoVO> fatos) {
        SimpleDateFormat dt = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        String caminho;
        caminho = FacesContext.getCurrentInstance().getExternalContext().getRealPath("/images/pag_contas.jpg");
        HashMap params = new HashMap();
        params.put("dataAtual", dt.format(new Date()));
        params.put("caminhoImagem", caminho);
        FacesJasper.createJasperReport(fatos, params,
                "/WEB-INF/report/template/FatosBoletos/relatorioRemuneracao.jasper", "Relatorio_de_Remuneração");

    }

    public List<RelatorioRemunecaoVO> consultaLoja(ConsultaFatosVO consultaFatosVO) {

        Restrictions restrictions = new Restrictions();

        if (consultaFatosVO.getLoja() != null) {
            restrictions.equals("fb.loja", consultaFatosVO.getLoja());
        }
        if (consultaFatosVO.getConvenio() != null) {
            restrictions.equals("fb.convenioboleto", consultaFatosVO.getConvenio());
        }

        if (!"".equals(consultaFatosVO.getPeriodoInicial()) && "".equals(consultaFatosVO.getPeriodoFinal())) {
            restrictions.greaterEqualsThan("fb.periodo", convertPeriodoInteger(consultaFatosVO.getPeriodoInicial()));
        }

        if ("".equals(consultaFatosVO.getPeriodoInicial()) && !"".equals(consultaFatosVO.getPeriodoFinal())) {
            restrictions.lessEqualsThan("fb.periodo", convertPeriodoInteger(consultaFatosVO.getPeriodoInicial()));
        }

        if (!"".equals(consultaFatosVO.getPeriodoInicial()) && !"".equals(consultaFatosVO.getPeriodoFinal())) {
            restrictions.greaterEqualsThan("fb.periodo", convertPeriodoInteger(consultaFatosVO.getPeriodoInicial()));
            restrictions.lessEqualsThan("fb.periodo", convertPeriodoInteger(consultaFatosVO.getPeriodoFinal()));
        }

        List<RelatorioRemunecaoVO> relatorioRemunecao = new ArrayList<RelatorioRemunecaoVO>();

        List<FatosBoletos> fatosBoletos;

        fatosBoletos = fatosBoletosDAO.getQueryBuilder()
                .from(FatosBoletos.class, "fb")
                .add(restrictions).orderBy("fb.loja.id, fb.convenioboleto.id, fb.periodo ASC")
                .getResultList();

        for (FatosBoletos fato : fatosBoletos) {
            relatorioRemunecao.add(new RelatorioRemunecaoVO(fato));
        }

        return relatorioRemunecao;
    }

    public void updateUniConvenio(ComissaoConvenioVO comissaoConvenio) {
        fatosBoletosDAO.updateUnitarioConvenio(comissaoConvenio.getId(), comissaoConvenio.getUnitarioconvenio(), comissaoConvenio.getPeriodo());
    }

    public void updateUniLoja(ComissaoLojaVO comissaoLoja) {
        fatosBoletosDAO.updateUnitarioLoja(comissaoLoja.getId(), comissaoLoja.getUnitarioloja(), comissaoLoja.getPeriodo());
    }

    public List<RentabilidadeVO> listRentabilidade(Long loja, Date dataInicial, Date dataFinal, int boleto) {

        List<RentabilidadeVO> rentabilidades = new ArrayList<RentabilidadeVO>();
        String queryString = "";

        if (loja != null && dataInicial != null && dataFinal != null) {
            queryString = retornaQuery(boleto).replaceAll("DATAINICIAL", convertPeriodo(dataInicial).toString())
                    .replaceAll("DATAFINAL", convertPeriodo(dataFinal).toString()) + " AND loja_id=LOJAIDQUERY "
                    .replaceAll("LOJAIDQUERY", loja.toString()) + getAfterWhere(boleto);

        }

        if (loja != null && dataInicial != null && dataFinal == null) {
            queryString = retornaQuery(boleto).replaceAll("DATAINICIAL", convertPeriodo(dataInicial).toString())
                    .replaceAll("DATAFINAL", convertPeriodo(new Date()).toString()) + " AND loja_id=LOJAIDQUERY "
                    .replaceAll("LOJAIDQUERY", loja.toString()) + getAfterWhere(boleto);
        }

        if (loja != null && dataInicial == null && dataFinal != null) {
            queryString = retornaQuery(boleto).replaceAll("DATAINICIAL", "199001")
                    .replaceAll("DATAFINAL", convertPeriodo(dataFinal).toString()) + " AND loja_id=LOJAIDQUERY "
                    .replaceAll("LOJAIDQUERY", loja.toString()) + getAfterWhere(boleto);
        }

        if (loja != null && dataInicial == null && dataFinal == null) {
            queryString = retornaQuery(boleto).replaceAll("DATAINICIAL", "199001")
                    .replaceAll("DATAFINAL", convertPeriodo(new Date()).toString()) + " AND loja_id=LOJAIDQUERY "
                    .replaceAll("LOJAIDQUERY", loja.toString()) + getAfterWhere(boleto);
        }

        if (loja == null && dataInicial != null && dataFinal != null) {
            queryString = retornaQuery(verificaQueryExecutada(boleto)) + "where periodo between DATAINICIAL and DATAFINAL"
                    .replaceAll("DATAINICIAL", convertPeriodo(dataInicial).toString())
                    .replaceAll("DATAFINAL", convertPeriodo(dataFinal).toString());
        }

        if (loja == null && dataInicial != null && dataFinal == null) {
            queryString = retornaQuery(verificaQueryExecutada(boleto)) + "where periodo between DATAINICIAL and DATAFINAL"
                    .replaceAll("DATAINICIAL", convertPeriodo(dataInicial).toString())
                    .replaceAll("DATAFINAL", convertPeriodo(new Date()).toString());
        }

        if (loja == null && dataInicial == null && dataFinal != null) {
            queryString = retornaQuery(verificaQueryExecutada(boleto)) + "where periodo between DATAINICIAL and DATAFINAL"
                    .replaceAll("DATAINICIAL", "199001")
                    .replaceAll("DATAFINAL", convertPeriodo(dataFinal).toString());
        }

        if (loja == null && dataInicial == null && dataFinal == null) {
            queryString = retornaQuery(verificaQueryExecutada(boleto));
        }

        Query query;

        query = getEntityManager().createNativeQuery(queryString);

        List<Object[]> resultado = query.getResultList();

        for (Object[] tupla : resultado) {
            RentabilidadeVO rentabilidade = new RentabilidadeVO();
            rentabilidade.setConvenio(((BigInteger) tupla[0]).longValue());
            rentabilidade.setEmpresa((String) tupla[1]);
            rentabilidade.setGuias(((BigInteger) tupla[2]).intValue());
            rentabilidade.setValor((BigDecimal) tupla[3]);
            rentabilidade.setTarifaConvenio((BigDecimal) tupla[4]);
            rentabilidade.setComissaoConvenio((BigDecimal) tupla[5]);
            rentabilidade.setTarifaLoja((BigDecimal) tupla[6]);
            rentabilidade.setComissaoLoja((BigDecimal) tupla[7]);
            rentabilidade.setComissaoW7((BigDecimal) tupla[8]);
            rentabilidade.setComissao((BigDecimal) tupla[9]);
            rentabilidade.setImposto((BigDecimal) tupla[10]);
            rentabilidade.setLiquido((BigDecimal) tupla[11]);

            rentabilidades.add(rentabilidade);
        }

        return rentabilidades;
    }

    private Integer convertPeriodo(Date data) {
        SimpleDateFormat formatador = new SimpleDateFormat("yyyyMM");

        return Integer.parseInt(formatador.format(data));
    }

    /*
     método de retorno de querys. Abaixo os equivalentes
     boletos; => 1
     boletosSite; => 2
     boletosCreditos; => 3
     boletosRecargas; => 4
     boletosValeGas; => 5
     boletosOps; => 6
     */
    private String retornaQuery(int tipo) {
        String query = "";
        switch (tipo) {
            case 1:
                query = "select convenioboleto_id as convenio, nome empresa, sum(qtd) as guias, sum(arrecadado) as valor"
                        + ",avg(unitarioconvenio) as tarifaconvenio, sum(qtd*unitarioconvenio) comissaoconvenio"
                        + ",avg(unitarioloja) as tarifaloja, sum(qtd*unitarioloja) as comissaoloja"
                        + ",0.0 as comissaow7, sum(comissao_sn_ph) as custoper"
                        + ",sum(qtd*unitarioconvenio*0.2215) as imposto, "
                        + "sum((qtd*unitarioconvenio)-(qtd*unitarioloja)-(qtd*unitarioconvenio*0.2215)-(comissao_sn_ph)) as liquido "
                        + "from dados.fatosboletos f "
                        + "inner join dados.convenioboleto c on (c.id=convenioboleto_id) "
                        + "where periodo between DATAINICIAL and DATAFINAL ";
                break;
            case 2:
                query = "select conveniosite_id as convenio, nome empresa, sum(qtd) as guias, sum(arrecadado) as valor"
                        + ",avg(unitarioconvenio) as tarifaconvenio, sum(qtd*unitarioconvenio) comissaoconvenio"
                        + ",avg(unitarioloja) as tarifaloja, sum(qtd*unitarioloja) as comissaoloja"
                        + ",sum(qtd*unitarioconvenio*comissaow7/100) as comissaow7, sum(comissao_sn_ph) as custoper"
                        + ",sum(qtd*unitarioconvenio*0.2215) as imposto, "
                        + "sum((qtd*unitarioconvenio)-(qtd*unitarioloja)-(qtd*unitarioconvenio*0.2215)-(qtd*unitarioconvenio*comissaow7/100)-(comissao_sn_ph)) as liquido from dados.fatosboletosite f "
                        + "inner join dados.conveniosite c on (c.id=conveniosite_id) "
                        + "where periodo between DATAINICIAL and DATAFINAL ";

                break;
            case 3:
                query = "select conveniocredigi_id as convenio, nome empresa, sum(qtd) as guias, sum(arrecadado) as valor"
                        + ",avg(unitarioconvenio) as tarifaconvenio, sum(arrecadado*unitarioconvenio/100) comissaoconvenio "
                        + ",avg(unitarioloja) as tarifaloja, sum(arrecadado*unitarioloja/100) as comissaoloja "
                        + ",0.0 as comissaow7, sum(comissao_sn_ph) as custoper"
                        + ",sum((arrecadado*unitarioconvenio/100)*0) as imposto "
                        + ",sum((arrecadado*unitarioconvenio/100)-(arrecadado*unitarioloja/100)"
                        + "-((arrecadado*unitarioconvenio/100)*0)-(comissao_sn_ph)) as liquido "
                        + "from dados.fatoscreditos f "
                        + "inner join dados.conveniocredigi c on (c.id=conveniocredigi_id) ";
                break;
            case 4: // Falta Query Recarga
                query = "";
                break;
            case 5: // Falta Query Vale Gas
                query = "";
                break;
            case 6: // Falta Query Ops
                query = "";
                break;
            case 7: // Falta Query Banco
                query = "";
                break;
            case 8:
                query = "select cast (0 as bigint) as convenio, cast('' as varchar(50)) empresa, sum(qtd) as guias, sum(arrecadado) as valor"
                        + ",avg(unitarioconvenio) as tarifaconvenio, sum(qtd*unitarioconvenio) comissaoconvenio"
                        + ",avg(unitarioloja) as tarifaloja, sum(qtd*unitarioloja) as comissaoloja"
                        + ",0.0 as comissaow7, sum(comissao_sn_ph) as custoper"
                        + ",sum(qtd*unitarioconvenio*0.2215) as imposto, "
                        + "sum((qtd*unitarioconvenio)-(qtd*unitarioloja)-(qtd*unitarioconvenio*0.2215)-(comissao_sn_ph)) as liquido "
                        + "from dados.fatosboletos f ";
                break;
            case 9:
                query = "select cast (0 as bigint) as convenio, cast('' as varchar(50)) empresa, sum(qtd) as guias, sum(arrecadado) as valor"
                        + ",avg(unitarioconvenio) as tarifaconvenio, sum(qtd*unitarioconvenio) comissaoconvenio"
                        + ",avg(unitarioloja) as tarifaloja, sum(qtd*unitarioloja) as comissaoloja"
                        + ",sum(qtd*unitarioconvenio*comissaow7/100) as comissaow7, sum(comissao_sn_ph) as custoper"
                        + ",sum(qtd*unitarioconvenio*0.2215) as imposto, "
                        + "sum((qtd*unitarioconvenio)-(qtd*unitarioloja)-(qtd*unitarioconvenio*0.2215)-(qtd*unitarioconvenio*comissaow7/100)-(comissao_sn_ph)) as liquido from dados.fatosboletosite f ";
                break;
            case 10:
                query = "select cast (0 as bigint) as convenio, cast('' as varchar(50)) empresa, sum(qtd) as guias, sum(arrecadado) as valor"
                        + ",avg(unitarioconvenio) as tarifaconvenio, sum(arrecadado*unitarioconvenio/100) comissaoconvenio "
                        + ",avg(unitarioloja) as tarifaloja, sum(arrecadado*unitarioloja/100) as comissaoloja"
                        + ",0.0 as comissaow7, sum(comissao_sn_ph) as custoper"
                        + ",sum((arrecadado*unitarioconvenio/100)*0) as imposto "
                        + ",sum((arrecadado*unitarioconvenio/100)-(arrecadado*unitarioloja/100)"
                        + "-((arrecadado*unitarioconvenio/100)*0)-(comissao_sn_ph)) as liquido "
                        + "from dados.fatoscreditos f ";
                break;
            case 11:
                query = "";
                break;
            case 12:
                query = "";
                break;
            case 13:
                query = "";
                break;
            case 14:
                query = "";
                break;
        }
        return query;
    }
    
    private String getAfterWhere(int opcao) {
        String where = "";
        switch (opcao) {
            case 1:
                where = " group by nome, convenioboleto_id "
                        + "order by nome, convenioboleto_id;";
                break;
            case 2:
                where = "group by nome, conveniosite_id, unitarioconvenio, unitarioloja "
                        + "order by nome, conveniosite_id;";
                break;
            case 3:
                where = "group by nome, conveniocredigi_id "
                        + "order by nome, conveniocredigi_id;";
                break;
            case 4:
                where = "";
                break;
            case 5:
                where = "";
                break;
            case 6:
                where = "";
                break;
            case 7:
                where = "";
                break;

        }
        return where;
    }

    private int verificaQueryExecutada(int opcao) {
        int valor = 0;
        switch (opcao) {
            case 1:
                valor = 8;
                break;
            case 2:
                valor = 9;
                break;
            case 3:
                valor = 10;
                break;
            case 4:
                valor = 11;
                break;
            case 5:
                valor = 12;
                break;
            case 6:
                valor = 13;
                break;
            case 7:
                valor = 14;
                break;
        }
        return valor;
    }

    private Integer convertPeriodoInteger(String periodo) {
        String[] temp = periodo.split("/");
        Integer periodoTemp = Integer.valueOf(temp[1] + temp[0]);

        return periodoTemp;
    }
}
